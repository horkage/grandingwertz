

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.users (id)
  values (new.id);
  return new;
end;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."handle_new_user_monsters"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.player_monsters (user_id, base_monster_id, stats)
  select
    new.id as user_id,
    sm.base_monster_id,
    bm.base_stats
  from public.starter_monsters sm
  join public.base_monsters bm on sm.base_monster_id = bm.id;

  return new;
end;
$$;


ALTER FUNCTION "public"."handle_new_user_monsters"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."base_monsters" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "name" "text" NOT NULL,
    "emoji" "text",
    "rarity" "text" DEFAULT 'common'::"text",
    "base_stats" "jsonb" NOT NULL,
    "growth_curve" "jsonb" NOT NULL,
    "description" "text",
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."base_monsters" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."player_monsters" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "base_monster_id" "uuid" NOT NULL,
    "nickname" "text",
    "level" integer DEFAULT 1 NOT NULL,
    "stats" "jsonb" NOT NULL,
    "status" "text" DEFAULT 'available'::"text" NOT NULL,
    "from_starter" boolean DEFAULT false,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."player_monsters" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."starter_monsters" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "base_monster_id" "uuid" NOT NULL,
    "nickname" "text",
    "level" integer DEFAULT 1 NOT NULL,
    "assigned_stats" "jsonb",
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."starter_monsters" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."test_data" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "message" "text"
);


ALTER TABLE "public"."test_data" OWNER TO "postgres";


COMMENT ON TABLE "public"."test_data" IS 'Start from somewhere';



ALTER TABLE "public"."test_data" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."test_data_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"()
);


ALTER TABLE "public"."users" OWNER TO "postgres";


ALTER TABLE ONLY "public"."base_monsters"
    ADD CONSTRAINT "base_monsters_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."player_monsters"
    ADD CONSTRAINT "player_monsters_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."starter_monsters"
    ADD CONSTRAINT "starter_monsters_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."test_data"
    ADD CONSTRAINT "test_data_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



CREATE INDEX "player_monsters_status_idx" ON "public"."player_monsters" USING "btree" ("status");



CREATE INDEX "player_monsters_user_id_idx" ON "public"."player_monsters" USING "btree" ("user_id");



ALTER TABLE ONLY "public"."player_monsters"
    ADD CONSTRAINT "player_monsters_base_monster_id_fkey" FOREIGN KEY ("base_monster_id") REFERENCES "public"."base_monsters"("id");



ALTER TABLE ONLY "public"."player_monsters"
    ADD CONSTRAINT "player_monsters_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."starter_monsters"
    ADD CONSTRAINT "starter_monsters_base_monster_id_fkey" FOREIGN KEY ("base_monster_id") REFERENCES "public"."base_monsters"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



CREATE POLICY "Enable read access for all users" ON "public"."test_data" FOR SELECT USING (true);



ALTER TABLE "public"."test_data" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

























































































































































GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";



GRANT ALL ON FUNCTION "public"."handle_new_user_monsters"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user_monsters"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user_monsters"() TO "service_role";


















GRANT ALL ON TABLE "public"."base_monsters" TO "anon";
GRANT ALL ON TABLE "public"."base_monsters" TO "authenticated";
GRANT ALL ON TABLE "public"."base_monsters" TO "service_role";



GRANT ALL ON TABLE "public"."player_monsters" TO "anon";
GRANT ALL ON TABLE "public"."player_monsters" TO "authenticated";
GRANT ALL ON TABLE "public"."player_monsters" TO "service_role";



GRANT ALL ON TABLE "public"."starter_monsters" TO "anon";
GRANT ALL ON TABLE "public"."starter_monsters" TO "authenticated";
GRANT ALL ON TABLE "public"."starter_monsters" TO "service_role";



GRANT ALL ON TABLE "public"."test_data" TO "anon";
GRANT ALL ON TABLE "public"."test_data" TO "authenticated";
GRANT ALL ON TABLE "public"."test_data" TO "service_role";



GRANT ALL ON SEQUENCE "public"."test_data_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."test_data_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."test_data_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
